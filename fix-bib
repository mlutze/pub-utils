#!/usr/bin/env python3
from typing import Any, Collection, Mapping, Optional, TypeVar
import argparse
import os
import shutil
import webbrowser
from collections import defaultdict
import requests
from collections import Counter
from tempfile import TemporaryDirectory
import string
import re


import bibtexparser
from bibtexparser.library import Library
from bibtexparser.middlewares.middleware import BlockMiddleware
from bibtexparser.model import Block, Entry, Field, ImplicitComment, ExplicitComment, Preamble, String
from bibtexparser.middlewares.names import NameParts
from bibtexparser.middlewares.names import SeparateCoAuthors, SplitNameParts, MergeCoAuthors, MergeNameParts
from bibtexparser.middlewares.sorting_blocks import SortBlocksByTypeAndKeyMiddleware
from bibtexparser.writer import BibtexFormat

from habanero import cn

from pylatexenc.latex2text import LatexNodes2Text

from unidecode import unidecode

def log(string):
    """Logs the string to the appropriate stream."""
    print(string)

BLOCK_TYPE_ORDER = (ExplicitComment, String, Preamble, Entry, ImplicitComment)

FIELD_ORDER = [
    "title",
    "author",
    "journal",
    "booktitle",
    "institution",
    "volume",
    "number",
    "year",
    "school",
    "publisher",
    "isbn",
    "doi",
    "fixbib"
]

# entry type -> (required, optional)
FIELD_MAP = {
    "article": (sorted(["title", "author", "journal", "volume", "number", "year", "doi"], key=FIELD_ORDER.index), ["fixbib"]),
    "phdthesis": (sorted(["title", "author", "year", "school", "doi"], key=FIELD_ORDER.index), ["fixbib"]),
    "inproceedings": (sorted(["title", "author", "booktitle", "year", "doi"], key=FIELD_ORDER.index), ["fixbib"]),
    "techreport": (sorted(["title", "author", "institution", "year", "doi"], key=FIELD_ORDER.index), ["fixbib"]),
    "book": (sorted(["title", "author", "volume", "year", "publisher", "isbn"], key=FIELD_ORDER.index), ["doi", "fixbib"]),
    "inbook": (sorted(["title", "author", "booktitle", "year", "publisher", "isbn"], key=FIELD_ORDER.index), ["doi", "fixbib"]),
    "incollection": (sorted(["title", "author", "booktitle", "year", "doi"], key=FIELD_ORDER.index), ["fixbib"])
}

K = TypeVar('K')
V = TypeVar('V')

def invert_dict(d: dict[K, V]) -> dict[V, set[K]]:
    res = {}
    for k in d:
        if k in res:
            res[k].add(d[k])
        else:
            res[k] = set([d[k]])
    return res

def latexdecode(string: str) -> str:
    """Decodes the LaTeX in the given string."""
    decoder = LatexNodes2Text()
    return decoder.latex_to_text(string)

def get_tex_files(root: str) -> list[str]:
    """Returns the list of TeX files under the given root directory."""
    files: list[str] = []
    for (dir_name, _, file_names) in os.walk(root):
        for file_name in file_names:
            if file_name.endswith(".tex"):
                files.append(os.path.join(dir_name, file_name))
            else:
                pass
    return files

def file_contains(file_name: str, string: str) -> bool:
    """Returns true if the given file contains the given string."""
    with open(file_name) as file:
        for line in file:
            if string in line:
                return True
        else:
            return False

def multiple_replace(text: str, mapping: Mapping[str, str]) -> str:
  """Replace strings in the text according to the dictionary."""
  # https://code.activestate.com/recipes/81330-single-pass-multiple-replace/
  regex = re.compile("\\b(%s)\\b" % "|".join(map(re.escape, mapping.keys())))
  return regex.sub(lambda mo: mapping[mo.string[mo.start():mo.end()]], text) 
        
def replace_in_file(file_name: str, mapping: Mapping[str, str]) -> None:
    """Replaces text according to the mapping in the given file."""
    with open(file_name) as file:
        with TemporaryDirectory() as tmp_dir_name:
            tmp_file_name = tmp_dir_name + "/" + "tmp.tex"
            with open(tmp_file_name, "+w") as tmp_file:
                for line in file:
                    tmp_file.write(multiple_replace(line, mapping))
            shutil.copyfile(tmp_file_name, file_name)
            

def clean_doi(string: str) -> Optional[str]:
    """Removes any link information from the DOI string. Returns None if the string does not appear to represent a DOI.
    """
    cleaned = string.strip().removeprefix("https://doi.org/").removeprefix("http://doi.org/").removeprefix("doi.org/")
    if cleaned.startswith("10."):
        return cleaned
    else:
        return None

def titlecase_name(name: NameParts) -> NameParts:
    """Converts the name parts to titlecase."""

    def capitalize_mc(name: str) -> str:
        """Capitalizes the name, accounting for prefixes suchas 'Mc'."""
        lower_name = name.lower()
        prefixes = ["mc"]
        for prefix in prefixes:
            if lower_name.startswith(prefix):
                return prefix.capitalize() + lower_name.removeprefix(prefix).capitalize()
        else:
            return name.capitalize()

    def capitalize(n: str) -> str:
        """Capitalizes the name, accounting for hyphenation."""
        parts = n.split("-")
        new_parts = [capitalize_mc(part) for part in parts]
        return "-".join(new_parts)
    
    def mapNone(f):
        def fNone(x):
            if x is None:
                return None
            else:
                return f(x)
        return fNone
    
    def mapList(f):
        def fList(l):
            return [f(x) for x in l]
        return fList

    return NameParts(
        first=mapNone(mapList(capitalize))(name.first),
        von=mapNone(mapList(str.lower))(name.von),
        last=mapNone(mapList(capitalize))(name.last),
        jr=name.jr # TODO too dangerous. leaving as-is
    )

def set_field(entry: Entry, key: str, value: Any) -> Entry:
    new_fields_dict = entry.fields_dict.copy()
    new_fields_dict[key] = Field(key, value)
    new_fields = list(new_fields_dict.values())
    return Entry(
        entry_type=entry.entry_type,
        key=entry.key,
        fields=new_fields
    )

def is_done(entry: Entry) -> bool:
    return entry.fields_dict.get("fixbib", None) == "done"

class FormatNamesTransformer(BlockMiddleware):
    def __init__(self):
        self._allow_inplace_modification = True

    @staticmethod
    def metadata_key():
        return "FormatNamesTransformer"

    def transform_entry(self, entry: Entry, library: Library) -> Block:
        if is_done(entry):
            return entry

        author_field = entry.fields_dict.get("author", None)
        if author_field is None:
            return entry
        else:
            author_list = author_field.value
            new_author_list = [titlecase_name(author) for author in author_list]
            if author_list != new_author_list:
                log("Modified author formatting for entry: " + entry.key)
            return set_field(entry, "author", new_author_list)

class FilterUsedTransformer(BlockMiddleware):
    def __init__(self, root):
        self._tex_files = get_tex_files(root)
        self._allow_inplace_modification = True

    @staticmethod
    def metadata_key():
        return "FilterUsedTransformer"
    
    def transform_entry(self, entry: Entry, library: Library) -> Block | None:
        if any(file_contains(file_name, entry.key) for file_name in self._tex_files):
            return entry
        else:
            log("Removing unused entry: " + entry.key)
            return None
        
class OrderFieldTransformer(BlockMiddleware):
    def __init__(self, order):
        self._indices = {}
        for i in range(len(order)):
            self._indices[order[i]] = i
        self._allow_inplace_modification = False

    @staticmethod
    def metadata_key():
        return OrderFieldTransformer(BlockMiddleware)
    
    def transform_entry(self, entry: Entry, library: Library) -> Library:
        if is_done(entry):
            return entry
        fields = entry.fields
        new_fields = sorted(fields, key=lambda f: self._indices.get(f.key, float("inf")))
        return Entry(
            entry_type=entry.entry_type,
            key=entry.key,
            fields=new_fields
        )

class FilterFieldTransformer(BlockMiddleware):
    def __init__(self, map):
        self._map = map
        self._allow_inplace_modification = True

    @staticmethod
    def metadata_key():
        return "FilterOrderFieldTransformer"
    
    def transform_entry(self, entry: Entry, library: Library) -> Block:
        if is_done(entry):
            return entry
        all_keys = self._map.get(entry.entry_type, None)
        if all_keys is None:
            log("Not modifying unknown entry type: " + entry.entry_type)
            return entry
        else:
            required, optional = all_keys
            new_fields = [field for field in entry.fields if field.key in required + optional]
            return Entry(
                entry_type=entry.entry_type,
                key=entry.key,
                fields=new_fields
            )

class TodoFieldTransformer(BlockMiddleware):
    def __init__(self, map):
        self._map = map
        self._allow_inplace_modification = True
    
    @staticmethod
    def metadata_key():
        return "TodoFieldTransformer"
    
    def transform_entry(self, entry: Entry, library: Library) -> Block:
        if is_done(entry):
            return entry
        all_keys = self._map.get(entry.entry_type, None)
        if all_keys is None:
            log("Not modifying unknown entry type: " + entry.entry_type)
            return entry
        else:
            required, _optional = all_keys
            present_keys = set(entry.fields_dict.keys())
            missing_keys = [key for key in required if key not in present_keys]
            missing_fields = [Field(key, "TODO") for key in missing_keys]
            new_fields = entry.fields + missing_fields
            return Entry(
                entry_type=entry.entry_type,
                key=entry.key,
                fields=new_fields
            )

class LookupDoiTransformer(BlockMiddleware):
    def __init__(self, *, browserless: bool):
        self._browserless = browserless
        self._allow_inplace_modification = True
    
    @staticmethod
    def metadata_key():
        return "LookupDoiTransformer"

    def transform_entry(self, entry: Entry, library: Library) -> Block:
        if is_done(entry):
            return entry
        doi = entry.fields_dict.get("doi", None)
        if doi is not None:
            return entry
        else:
            print("Entry missing DOI: " + entry.key)
            title = entry.fields_dict.get("title", None)
            if title is None:
                print("Cannot look up DOI for titleless entry: " + entry.key)
                # TODO allow specifying DOI anyway
                return entry
            else:
                if not self._browserless:
                    print("Let me Google that for you...")
                    webbrowser.open("https://scholar.google.com/scholar?q=" + title.value)
                raw_doi = input("Enter the DOI or leave blank to skip: ")
                if raw_doi.strip() == "":
                    print("Skipping DOI")
                    return entry
                else:
                    while True:
                        doi_string = clean_doi(raw_doi)
                        if doi_string is None:
                            print("Invalid DOI.")
                            raw_doi = input("Enter the DOI or leave blank to skip: ")
                            if raw_doi.strip() == "":
                                print("Skipping DOI")
                                return entry
                            else:
                                pass
                        else:
                            break
                    return set_field(entry, "doi", doi_string)

class LookupCitationTransformer(BlockMiddleware):
    def __init__(self, *, clobber: bool):
        self._clobber = clobber
        self._allow_inplace_modification = True

    @staticmethod
    def metadata_key():
        return "LookupFieldsTransformer"

    def transform_entry(self, entry: Entry, library: Library) -> Block:
        if is_done(entry):
            return entry
        doi = entry.fields_dict.get("doi", None)
        if doi is None:
            log("Cannot look up citation for DOIless entry: " + entry.key)
            return entry
        else:
            try:
                crossref_bibtex = cn.content_negotiation(doi.value)
            except requests.exceptions.HTTPError:
                log("Not modifying entry with invalid doi: " + entry.key)
                return entry
            try:
                crossref_entries = bibtexparser.parse_string(crossref_bibtex)
            except:
                log("error parsing crossref entry for entry: " + entry + " with doi: " + doi)
                return entry
            if len(crossref_entries.entries) == 0:
                log("no entry found for entry: " + entry.key + " with doi: " + doi)
                return entry
            crossref_entry = crossref_entries.entries[0]
            if self._clobber:
                return Entry(crossref_entry.entry_type, entry.key, crossref_entry.fields)
            else:
                new_fields = entry.fields_dict.copy()
                crossref_fields = crossref_entry.fields_dict
                for field in crossref_fields:
                    if field not in new_fields:
                        new_fields[field] = crossref_fields[field]
                return Entry(entry.entry_type, key=entry.key, fields = list(new_fields.values()))

class RemoveImplicitCommentsTransformer(BlockMiddleware):
    def __init__(self):
        self._allow_inplace_modification = True
    
    @staticmethod
    def metadata_key():
        return "RemoveCommentsMiddleware"
    
    def transform_implicit_comment(self, implicit_comment: ImplicitComment, library: Library) -> None:
        return None
    
class GatherKeyRenamesVisitor(BlockMiddleware):
    def __init__(self, renames: dict[str, str]):
        # old key -> new key
        self._renames = renames
        # old key -> (unindexed new key, title)
        self._mapping: dict[str, (str, str)] = {}
        self._duplicates: set[str] = set()
        self._allow_inplace_modification = True
    
    @staticmethod
    def metadata_key():
        return "GatherKeyRenamesVisitor"
    
    def transform(self, library: Library) -> Library:
        # run the visitor over the entries
        super().transform(library)

        # remove duplicates
        for duplicate in self._duplicates:
            # TODO log
            del self._renames[duplicate]

        # invert the mapping
        # new key -> set((old key, title))
        new_to_old = defaultdict(list)
        for old_key, (new_key, title) in self._mapping.items():
            new_to_old[new_key].append((old_key, title))
        
        # sort the old key list by title
        for _, old_list in new_to_old.items():
            old_list.sort(key = lambda pair: pair[1])
        
        # make the final mapping with indexed keys
        # old key -> new indexed key
        for new_key, old_list in new_to_old.items():
            if len(old_list) == 1:
                old_key, _ = old_list[0]
                self._renames[old_key] = new_key
            else:
                indices = iter(string.ascii_lowercase)
                for old_key, _ in old_list:
                    self._renames[old_key] = new_key + next(indices)

        # return the library unchanged
        return library
    
    def transform_entry(self, entry: Entry, library: Library) -> Block | Collection[Block] | None:
        author_field = entry.fields_dict.get("author", None)
        year_field = entry.fields_dict.get("year", None)
        title_field = entry.fields_dict.get("title", None)
        if author_field is None:
            log("Cannot format key for authorless entry: " + entry.key)
            return entry
        if year_field is None:
            log("Cannot format key for yearless entry: " + entry.key)
            return entry
        author_list = author_field.value
        if author_list == []:
            log("Cannot format key for authorless entry: " + entry.key)
            return entry
        first_author: NameParts = author_list[0]
        year = year_field.value
        raw_key = "".join(first_author.von + first_author.last).lower() + year
        messy_key = latexdecode(raw_key)
        if messy_key is None:
            log("Not renaming non-decodable key: " + raw_key)
            messy_key = raw_key
        key = unidecode(messy_key)
        # check whether this key is a duplicate
        if entry.key in self._mapping:
            self._duplicates.add(entry.key)
            log("Not renaming duplicate key: " + entry.key)
        else:
            self._mapping[entry.key] = (key, title_field.value)
        return super().transform_entry(entry, library)

class RenameKeysTransformer(BlockMiddleware):
    def __init__(self, root: str, renames: dict[str, str]):
        self._root = root
        self._renames = renames
        self._allow_inplace_modification = True

    @staticmethod
    def metadata_key():
        return "RenameKeysTransformer"

    def transform(self, library: Library) -> Library:
        result = super().transform(library)
        files = get_tex_files(self._root)
        for file in files:
            replace_in_file(file, self._renames)
        return result
    
    def transform_entry(self, entry: Entry, library: Library) -> Block:
        # TODO log
        new_key = self._renames.get(entry.key, entry.key)
        return Entry(entry_type=entry.entry_type, key=new_key, fields=entry.fields)

class LowerFieldsTransformer(BlockMiddleware):
    def __init__(self):
        self._allow_inplace_modification = True

    @staticmethod
    def metadata_key():
        return "LowerFieldsTransformer"
    
    def transform_entry(self, entry: Entry, library: Library) -> Entry:
        if is_done(entry):
            return entry
        new_fields = [Field(field.key.lower(), field.value) for field in entry.fields]
        return Entry(entry.entry_type, entry.key, new_fields)

class MarkDoneTransformer(BlockMiddleware):
    def __init__(self):
        self._allow_inplace_modification = True

    @staticmethod
    def metadata_key():
        return "MarkDoneTransformer"
    
    def transform_entry(self, entry: Entry, library: Library) -> Entry:
        if is_done(entry):
            return entry
        return set_field(entry, "fixbib", "done")


def main():
    parser = argparse.ArgumentParser(
        description="Clean up a BibTeX file according to Flix contributor conventions."
    )
    parser.add_argument("bib_file")
    parser.add_argument("-d", "--dir", action="store", help="specify a directory for .tex files (default current directory)")
    parser.add_argument("-f", "--filter", action="store_true", help="filter down to required fields")
    parser.add_argument("-i", "--interactive", action="store_true", help="run in interactive mode")
    parser.add_argument("-k", "--keys", action="store_true", help="modify entry keys")
    parser.add_argument("-l", "--lookup", action="store_true", help="look up citations via CrossRef")
    parser.add_argument("-m", "--mark", action="store_true", help="mark transformed entries")
    parser.add_argument("-n", "--names", action="store_true", help="format author names")
    parser.add_argument("-o", "--output", action="store", help="specify an output file (default in-place)")
    parser.add_argument("-r", "--replace", action="store_true", help="replace existing fields with CrossRef fields")
    parser.add_argument("-s", "--sort", action="store_true", help="sort entries by key")
    parser.add_argument("-t", "--todo", action="store_true", help="mark required fields with TODO")
    parser.add_argument("-u", "--unused", action="store_true", help="remove unused entries")

    parser.add_argument("-X", "--browserless", action="store_true", help=argparse.SUPPRESS)

    args = parser.parse_args()

    bib_file_name = args.bib_file

    if args.output is None:
        backup_file_name = bib_file_name + ".bak"
        shutil.copyfile(bib_file_name, backup_file_name)
        out_file = bib_file_name
    else:
        out_file = args.output
    
    if args.dir is None:
        root = "."
    else:
        root = args.dir


    db = bibtexparser.parse_file(bib_file_name)

    middleware = []
    if args.unused:
        middleware.append(FilterUsedTransformer(root))
    if args.interactive:
        middleware.append(LookupDoiTransformer(browserless=args.browserless))
    if args.lookup:
        middleware.append(LookupCitationTransformer(clobber=args.replace))
    middleware.append(LowerFieldsTransformer())
    if args.filter:
        middleware.append(FilterFieldTransformer(FIELD_MAP))
    if args.todo:
        middleware.append(TodoFieldTransformer(FIELD_MAP))
    if args.names:
        middleware.append(SeparateCoAuthors())
        middleware.append(SplitNameParts())
        middleware.append(FormatNamesTransformer())
        middleware.append(MergeNameParts())
        middleware.append(MergeCoAuthors())
    if args.keys:
        middleware.append(SeparateCoAuthors())
        middleware.append(SplitNameParts())
        renames = {}
        middleware.append(GatherKeyRenamesVisitor(renames))
        middleware.append(RenameKeysTransformer(root, renames))
        middleware.append(MergeNameParts())
        middleware.append(MergeCoAuthors())
    if args.mark:
        middleware.append(MarkDoneTransformer())
    if args.sort:
        middleware.append(OrderFieldTransformer(FIELD_ORDER))
        middleware.append(RemoveImplicitCommentsTransformer())
        middleware.append(SortBlocksByTypeAndKeyMiddleware(BLOCK_TYPE_ORDER))

    bib_format = BibtexFormat()
    bib_format.indent = "  "
    bib_format.value_column = "auto"

    bibtexparser.write_file(out_file, library=db, append_middleware=middleware, bibtex_format=bib_format)

if __name__ == "__main__":
    main()
