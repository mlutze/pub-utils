#!/usr/bin/env python3

import os

from collections import Counter

from pylatexenc.latexnodes.parsers import LatexGeneralNodesParser
from pylatexenc.latexnodes.nodes import LatexMacroNode, LatexGroupNode, LatexNodeList
from pylatexenc.latexnodes import ParsedArguments
from pylatexenc.latexwalker import LatexNodesVisitor
from pylatexenc.latexwalker import LatexWalker

class MacroCollector(LatexNodesVisitor):
    def __init__(self) -> None:
        self._declared_macros = set()
        self._used_macros = Counter()
        self._declared_environments = set()
        self._used_environments = Counter()
        super().__init__()

    def visit_macro_node(self, node: LatexMacroNode):
        if node.macroname == "newcommand":
            node.nodeargd: ParsedArguments
            new_macro = node.nodeargd.argnlist[1]
            match new_macro:
                case LatexGroupNode():
                    nodes: LatexNodeList = new_macro.nodelist
                    nodelist = nodes.nodelist
                    match nodelist:
                        case [macro]:
                            match macro:
                                case LatexMacroNode():
                                    name = macro.macroname
                                    self._declared_macros.add(name)
                                case _:
                                    raise Exception("bad macro declaration")
                        case _:
                            raise Exception("bad macro declaration")
                case LatexMacroNode():
                    name = new_macro.macroname
                    self._declared_macros.add(name)
        self._used_macros[node.macroname] += 1
    
    def get_unused_macros(self):
        # <= 1 because the declaration counts as a use
        return set(macro for macro in self._declared_macros if self._used_macros[macro] <= 1)

def get_tex_files(root: str) -> list[str]:
    """Returns the list of TeX files under the given root directory."""
    files: list[str] = []
    for (dir_name, _, file_names) in os.walk(root):
        for file_name in file_names:
            if file_name.endswith(".tex"):
                files.append(os.path.join(dir_name, file_name))
            else:
                pass
    return files

def main():
    collector = MacroCollector()
    tex_files = get_tex_files(".")
    for tex_file in tex_files:
        with open(tex_file) as file:
            source = file.read()
            content, _ = LatexWalker(source).parse_content(LatexGeneralNodesParser())
            collector.start(content)
    print(collector.get_unused_macros())

if __name__ == "__main__":
    main()